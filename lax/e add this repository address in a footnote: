Help on package lacosmicx:

NNAAMMEE
    lacosmicx - Optimized implementation of the LA Cosmic algorithm

FFIILLEE
    /home/hydway/anaconda2/lib/python2.7/site-packages/lacosmicx-1.0-py2.7-linux-x86_64.egg/lacosmicx/__init__.py

DDEESSCCRRIIPPTTIIOONN
    Name : Lacosmicx
    Author : Curtis McCully
    Date : October 2014
    
    Lacosmicx is designed to detect cosmic rays in images (numpy arrays),
    based on Pieter van Dokkum's L.A.Cosmic algorithm.
    
    Much of this was originally adapted from cosmics.py written by Malte Tewes.
    I have ported all of the slow functions to Cython/C, and optimized
    where I can. This is designed to be as fast as possible so some of the
    readability has been sacrificed, specifically in the C code.
    
    L.A.Cosmic = LAplacian Cosmic ray detection
    
    If you use this code, please consider adding this repository address in a
    footnote: https://github.com/cmccully/lacosmicx
    
    Also please cite the original paper which can be found at:
    U{http://www.astro.yale.edu/dokkum/lacosmic/}
    
    van Dokkum 2001, PASP, 113, 789, 1420
    (article : U{http://adsabs.harvard.edu/abs/2001PASP..113.1420V})
    
    This code requires Cython, preferably version >= 0.21.
    
    Parallelization is achieved using OpenMP. This code should compile (although
    the Cython files may have issues) using a compiler that does not support OMP,
    e.g. clang.
    
    Notes
    -----
    Differences from original LACosmic:
    
    - Automatic recognition of saturated stars, including their trails.
    This avoids treating such stars as large cosmic rays.
    
    -I have tried to optimize all of the code as much as possible while
    maintaining the integrity of the algorithm. One of the key speedups is to
    use a separable median filter instead of the true median filter. While these
    are not identical, they produce comparable results and the separable version
    is much faster.
    
    -This implementation is much faster than the Python by as much as a factor of
    17 depending on the given parameters, even without running multiple threads.
    With multiple threads, this can be increased easily by another factor of 2.
    This implementation is much faster than the original IRAF version
    (orders of magnitude).
    
    -The arrays always must be C-contiguous, thus all loops are y outer, x inner.
    Note that this follows the Pyfits convention.

PPAACCKKAAGGEE  CCOONNTTEENNTTSS


FFUUNNCCTTIIOONNSS
    llaaccoossmmiiccxx(...)
        lacosmicx(indat, inmask=None, sigclip=4.5, sigfrac=0.3, objlim=5.0,
                     gain=1.0, readnoise=6.5, satlevel=65536.0, pssl=0.0, niter=4,
                     sepmed=True, cleantype='meanmask', fsmode='median',
                     psfmodel='gauss', psffwhm=2.5,psfsize=7, psfk=None,
                     psfbeta=4.765, verbose=False)
        
        Run the LACosmic algorithm to detect cosmic rays in a numpy array.
        
        If you use this code, please add this repository address in a footnote:
        https://github.com/cmccully/lacosmicx
        
        Please cite the original paper which can be found at:
        U{http://www.astro.yale.edu/dokkum/lacosmic/}
        
        van Dokkum 2001, PASP, 113, 789, 1420
        (article : U{http://adsabs.harvard.edu/abs/2001PASP..113.1420V})
        
        Parameters
        ----------
        indat : float numpy array
            Input data array that will be used for cosmic ray detection.
        
        inmask : boolean numpy array, optional
            Input bad pixel mask. Values of True will be ignored in the cosmic ray
            detection/cleaning process. Default: None.
        
        sigclip : float, optional
            Laplacian-to-noise limit for cosmic ray detection. Lower values will
            flag more pixels as cosmic rays. Default: 4.5.
        
        sigfrac : float, optional
            Fractional detection limit for neighboring pixels. For cosmic ray
            neighbor pixels, a lapacian-to-noise detection limit of
            sigfrac * sigclip will be used. Default: 0.3.
        
        objlim : float, optional
            Minimum contrast between Laplacian image and the fine structure image.
            Increase this value if cores of bright stars are flagged as cosmic
            rays. Default: 5.0.
        
        pssl : float, optional
            Previously subtracted sky level in ADU. We always need to work in
            electrons for cosmic ray detection, so we need to know the sky level
            that has been subtracted so we can add it back in. Default: 0.0.
        
        gain : float, optional
            Gain of the image (electrons / ADU). We always need to work in
            electrons for cosmic ray detection. Default: 1.0
        
        readnoise : float, optional
            Read noise of the image (electrons). Used to generate the noise model
            of the image. Default: 6.5.
        
        satlevel : float, optional
            Saturation of level of the image (electrons). This value is used to
            detect saturated stars and pixels at or above this level are added to
            the mask. Default: 65536.0.
        
        niter : int, optional
            Number of iterations of the LA Cosmic algorithm to perform. Default: 4.
        
        sepmed : boolean, optional
            Use the separable median filter instead of the full median filter.
            The separable median is not identical to the full median filter, but
            they are approximately the same and the separable median filter is
            significantly faster and still detects cosmic rays well. Default: True
        
        cleantype : {'median', 'medmask', 'meanmask', 'idw'}, optional
            Set which clean algorithm is used:
        
            'median': An umasked 5x5 median filter
        
            'medmask': A masked 5x5 median filter
        
            'meanmask': A masked 5x5 mean filter
        
            'idw': A masked 5x5 inverse distance weighted interpolation
        
            Default: "meanmask".
        
        fsmode : {'median', 'convolve'}, optional
            Method to build the fine structure image:
        
            'median': Use the median filter in the standard LA Cosmic algorithm
            'convolve': Convolve the image with the psf kernel to calculate the
            fine structure image.
            Default: 'median'.
        
        psfmodel : {'gauss', 'gaussx', 'gaussy', 'moffat'}, optional
            Model to use to generate the psf kernel if fsmode == 'convolve' and
            psfk is None. The current choices are Gaussian and Moffat profiles.
            'gauss' and 'moffat' produce circular PSF kernels. The 'gaussx' and
            'gaussy' produce Gaussian kernels in the x and y directions
            respectively. Default: "gauss".
        
        psffwhm : float, optional
            Full Width Half Maximum of the PSF to use to generate the kernel.
            Default: 2.5.
        
        psfsize : int, optional
            Size of the kernel to calculate. Returned kernel will have size
            psfsize x psfsize. psfsize should be odd. Default: 7.
        
        psfk : float numpy array, optional
            PSF kernel array to use for the fine structure image if
            fsmode == 'convolve'. If None and fsmode == 'convolve', we calculate
            the psf kernel using 'psfmodel'. Default: None.
        
        psfbeta : float, optional
            Moffat beta parameter. Only used if fsmode=='convolve' and
            psfmodel=='moffat'. Default: 4.765.
        
        verbose : boolean, optional
            Print to the screen or not. Default: False.
        
        Returns
        -------
        crmask : boolean numpy array
            The cosmic ray mask (boolean) array with values of True where there are
            cosmic ray detections.
        
        cleanarr : float numpy array
            The cleaned data array.
        
        Notes
        -----
        To reproduce the most similar behavior to the original LA Cosmic
        (written in IRAF), set  inmask = None, satlevel = np.inf, sepmed=False,
        cleantype='medmask', and fsmode='median'.
        
        The original IRAF version distinguishes between spectroscopic and imaging
        data. This version does not. After sky subtracting the spectroscopic data,
        this version will work well. The 1-d 'gaussx' and 'gaussy' values for
        psfmodel can also be used for spectroscopic data (and may even alleviate
        the need to do sky subtraction, but this still requires more testing).

DDAATTAA
    ____aallll____ = ['lacosmicx']
    ____llooaaddeerr____ = <zipimporter object "/home/hydway/anaconda2/lib/...e-pack...

